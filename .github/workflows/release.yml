name: Realese manifest and build

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # required for github-action-get-previous-tag
      - name: Get Previous tag
        id: pretag
        uses: 'WyriHaximus/github-action-get-previous-tag@v1'
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Bump semantic version
        id: semverinc
        uses: paulhatch/semantic-version@v5.3.0
        with:
          # The prefix to use to identify tags
          tag_prefix: ""
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change, supports regular expressions wrapped with '/'
          major_pattern: "(MAJOR)"
          # A string which indicates the flags used by the `major_pattern` regular expression. Supported flags: idgs
          major_regexp_flags: ""
          # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
          minor_pattern: "(MINOR)"
          # A string which indicates the flags used by the `minor_pattern` regular expression. Supported flags: idgs
          minor_regexp_flags: ""
          # A string to determine the format of the version output
          version_format: "${major}.${minor}.${patch}-prerelease${increment}"
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: true
          # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
          search_commit_body: false
          # The output method used to generate list of users, 'csv' or 'json'.
          user_format_type: "csv"
          # Prevents pre-v1.0.0 version from automatically incrementing the major version.
          # If enabled, when the major version is 0, major releases will be treated as minor and minor as patch. Note that the version_type output is unchanged.
          enable_prerelease_mode: false
          # If enabled, diagnostic information will be added to the action output.
          debug: false
          # If true, the branch will be used to select the maximum version.
          version_from_branch: false
      - name: Generate a changelog
        uses: orhun/git-cliff-action@v2
        id: git-cliff
        with:
          args: -t ${{ steps.semverinc.outputs.version }} ${{ steps.pretag.outputs.tag }}..HEAD -o notes.toml
        env:
          OUTPUT: CHANGELOG.md
      - name: Create release
        id: create_release_id
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.semverinc.outputs.version }}
          release_name: Release ${{ steps.semverinc.outputs.version_tag }}
          body_path: notes.toml

      - name: Build release version
        run: cargo build --release --verbose

      - name: Upload linux artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_id.outputs.upload_url }}
          asset_path: ./target/release/linux-fs-audit
          asset_name: ubuntu-latest-fs-audit
          asset_content_type: application/blob
      - name: Upload setup script artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_id.outputs.upload_url }}
          asset_path: ./resources/setup_auditd.sh
          asset_name: setup_auditd.sh
          asset_content_type: application/script
